#!/usr/bin/env python3
"""
Script de teste para verificar o funcionamento da IA do Gomoku
"""

from services.game_logic import GameLogic
from models.game import Position, PieceColor

def test_ai_basic():
    """Teste b√°sico da IA"""
    print("=== Teste B√°sico da IA ===")
    
    game_logic = GameLogic()
    
    # Tabuleiro vazio
    empty_board = [[None for _ in range(19)] for _ in range(19)]
    
    # Teste IA f√°cil
    print("Testando IA f√°cil...")
    ai_move = game_logic.get_ai_move(empty_board, difficulty="easy")
    print(f"Movimento da IA (f√°cil): {ai_move.row}, {ai_move.col}")
    
    # Teste IA m√©dia
    print("Testando IA m√©dia...")
    ai_move = game_logic.get_ai_move(empty_board, difficulty="medium")
    print(f"Movimento da IA (m√©dia): {ai_move.row}, {ai_move.col}")
    
    # Teste IA dif√≠cil
    print("Testando IA dif√≠cil...")
    ai_move = game_logic.get_ai_move(empty_board, difficulty="hard")
    print(f"Movimento da IA (dif√≠cil): {ai_move.row}, {ai_move.col}")

def test_ai_strategic():
    """Teste estrat√©gico da IA"""
    print("\n=== Teste Estrat√©gico da IA ===")
    
    game_logic = GameLogic()
    
    # Criar um tabuleiro com algumas pe√ßas
    board = [[None for _ in range(19)] for _ in range(19)]
    
    # Simular uma situa√ß√£o onde o jogador est√° prestes a ganhar
    # Colocar 4 pe√ßas pretas em linha
    board[9][5] = "black"
    board[9][6] = "black"
    board[9][7] = "black"
    board[9][8] = "black"
    # A posi√ß√£o [9][9] seria a vit√≥ria
    
    print("Situa√ß√£o: Jogador preto tem 4 em linha, IA precisa bloquear")
    ai_move = game_logic.get_ai_move(board, difficulty="medium")
    print(f"IA deve jogar em (9,9) ou (9,4). Jogou em: ({ai_move.row}, {ai_move.col})")
    
    expected_positions = [(9, 9), (9, 4)]
    if (ai_move.row, ai_move.col) in expected_positions:
        print("‚úÖ IA bloqueou corretamente!")
    else:
        print("‚ùå IA n√£o bloqueou adequadamente.")

def test_ai_winning():
    """Teste de situa√ß√£o de vit√≥ria da IA"""
    print("\n=== Teste de Vit√≥ria da IA ===")
    
    game_logic = GameLogic()
    
    # Criar um tabuleiro onde a IA pode ganhar
    board = [[None for _ in range(19)] for _ in range(19)]
    
    # Colocar 4 pe√ßas brancas (IA) em linha
    board[10][5] = "white"
    board[10][6] = "white"
    board[10][7] = "white"
    board[10][8] = "white"
    # A posi√ß√£o [10][9] seria a vit√≥ria
    
    print("Situa√ß√£o: IA tem 4 em linha, pode ganhar")
    ai_move = game_logic.get_ai_move(board, difficulty="medium")
    print(f"IA deve jogar em (10,9) ou (10,4). Jogou em: ({ai_move.row}, {ai_move.col})")
    
    expected_positions = [(10, 9), (10, 4)]
    if (ai_move.row, ai_move.col) in expected_positions:
        print("‚úÖ IA pode ganhar!")
    else:
        print("‚ùå IA perdeu a oportunidade de ganhar.")

def test_win_detection():
    """Teste de detec√ß√£o de vit√≥ria"""
    print("\n=== Teste de Detec√ß√£o de Vit√≥ria ===")
    
    game_logic = GameLogic()
    
    # Criar um tabuleiro com 5 em linha
    board = [[None for _ in range(19)] for _ in range(19)]
    
    # 5 pe√ßas pretas em linha horizontal
    for i in range(5):
        board[9][5 + i] = "black"
    
    # Testar detec√ß√£o de vit√≥ria
    winner = game_logic.check_winner(board, Position(row=9, col=8), PieceColor.BLACK)
    
    if winner == PieceColor.BLACK:
        print("‚úÖ Vit√≥ria detectada corretamente!")
    else:
        print("‚ùå Vit√≥ria n√£o foi detectada.")

def main():
    """Fun√ß√£o principal"""
    print("üéÆ Testando IA do Gomoku\n")
    
    test_ai_basic()
    test_ai_strategic()
    test_ai_winning()
    test_win_detection()
    
    print("\nüéØ Testes conclu√≠dos!")

if __name__ == "__main__":
    main()
