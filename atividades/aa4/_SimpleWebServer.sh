#!/bin/bash
# _SimpleWebServer.sh
# Script para iniciar um servidor web simples para o projeto Gomoku
# Projeto Web UFSC - INE5646

# Configura√ß√µes
PORT=8080
BROWSER="firefox"

# Fun√ß√£o para verificar se uma porta est√° em uso
check_port() {
    if command -v lsof >/dev/null 2>&1; then
        if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null; then
            return 0  # Porta em uso
        fi
    fi
    return 1  # Porta livre
}

# Fun√ß√£o para encontrar uma porta livre
find_free_port() {
    local port=$PORT
    while check_port; do
        ((port++))
        PORT=$port
    done
}

# Fun√ß√£o para iniciar o servidor
start_server() {
    echo "=============================================="
    echo "  Gomoku - Servidor Web Simples"
    echo "  Projeto Web UFSC - INE5646"
    echo "=============================================="
    echo ""
    
    # Verificar depend√™ncias
    if ! command -v php >/dev/null 2>&1; then
        echo "‚ùå ERRO: PHP n√£o est√° instalado!"
        echo "   Execute: sudo apt install php -y"
        exit 1
    fi
    
    # Verificar se est√° no diret√≥rio correto
    if [ ! -f "index.html" ]; then
        echo "‚ùå ERRO: Arquivo index.html n√£o encontrado!"
        echo "   Execute este script no diret√≥rio do projeto."
        exit 1
    fi
    
    # Encontrar porta livre
    find_free_port
    
    echo "üöÄ Iniciando servidor web..."
    echo "üìÅ Diret√≥rio: $(pwd)"
    echo "üåê Porta: $PORT"
    echo "üîó URL: http://localhost:$PORT"
    echo ""
    echo "Arquivos dispon√≠veis:"
    echo "  - http://localhost:$PORT/index.html (P√°gina principal)"
    echo "  - http://localhost:$PORT/DOM.html (Estrutura DOM)"
    echo ""
    echo "Para parar o servidor, pressione Ctrl+C"
    echo "=============================================="
    echo ""
    
    # Aguardar um momento
    sleep 2
    
    # Abrir navegador em background se dispon√≠vel
    if command -v $BROWSER >/dev/null 2>&1; then
        echo "üåê Abrindo navegador..."
        $BROWSER "http://localhost:$PORT" >/dev/null 2>&1 &
    elif command -v xdg-open >/dev/null 2>&1; then
        echo "üåê Abrindo navegador..."
        xdg-open "http://localhost:$PORT" >/dev/null 2>&1 &
    else
        echo "‚ÑπÔ∏è  Abra manualmente: http://localhost:$PORT"
    fi
    
    echo ""
    echo "üìä Logs do servidor:"
    echo "----------------------------------------------"
    
    # Iniciar servidor PHP
    php -S localhost:$PORT
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [op√ß√µes]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -p, --port PORT    Define a porta (padr√£o: 8080)"
    echo "  -b, --browser APP  Define o navegador (padr√£o: firefox)"
    echo "  -h, --help         Mostra esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0                 # Usar configura√ß√µes padr√£o"
    echo "  $0 -p 3000         # Usar porta 3000"
    echo "  $0 -b chromium     # Usar Chromium"
    echo ""
}

# Processar argumentos da linha de comando
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -b|--browser)
            BROWSER="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o desconhecida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Fun√ß√£o para limpeza ao sair
cleanup() {
    echo ""
    echo "üõë Parando servidor..."
    echo "‚úÖ Servidor finalizado."
    exit 0
}

# Configurar trap para limpeza
trap cleanup SIGINT SIGTERM

# Verificar se j√° existe um servidor rodando na porta
if check_port; then
    echo "‚ö†Ô∏è  Porta $PORT j√° est√° em uso!"
    echo "   Tentando encontrar uma porta livre..."
fi

# Iniciar servidor
start_server
